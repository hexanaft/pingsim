# This is a basic workflow to help you get started with Actions
# workflow - цепочка действий
# Имя процесса Билдится на всех типах
name: CMake Build Matrix

# Controls when the action will run. Triggers the workflow on push
on: [push]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }} # будет запускаться по очереди на всех типах машин
    strategy:
      fail-fast: false
      matrix:
        config: 
        - {
            name: "Windows Latest MSVC",
            os: windows-latest,
            artifact: "windows_msvc.7z",
            build_type: "Release",
            cc: "cl",
            cxx: "cl",
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
            archiver: "7z a",
            generators: "Visual Studio 16 2019"
          }
        - {
            name: "Windows Latest MinGW",
            os: windows-latest,
            artifact: "windows_mingw.7z",
            build_type: "Release",
            cc: "gcc",
            cxx: "g++",
            archiver: "7z a",
            generators: "MSYS Makefiles"
          }
        - {
            name: "Ubuntu Latest GCC",
            os: ubuntu-latest,
            artifact: "ubuntu_gcc.7z",
            build_type: "Release",
            cc: "gcc",
            cxx: "g++",
            archiver: "7z a",
            generators: "Unix Makefiles"
          }
        - {
            name: "macOS Latest Clang",
            os: macos-latest,
            artifact: "macos_clang.tar.gz",
            build_type: "Release",
            cc: "clang",
            cxx: "clang++",
            archiver: "tar cJfv",
            generators: "Unix Makefiles"
          }

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Install dependencies on windows
        if: startsWith(matrix.config.os, 'windows')
        run: |
          choco install ninja cmake
          ninja --version
          cmake --version

      - name: Install dependencies on ubuntu
        if: startsWith(matrix.config.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build cmake
          ninja --version
          cmake --version

      - name: Install dependencies on macos
        if: startsWith(matrix.config.os, 'macos')
        run: |
          brew install p7zip cmake ninja
          ninja --version
          cmake --version

      # - name: Configure
      #   shell: bash
      #   run: |
      #     cmake --version
      #     mkdir build
      #     mkdir instdir

      - name: Configure
        shell: cmake -P {0}
        run: |
          set(ENV{CC} ${{ matrix.config.cc }})
          set(ENV{CXX} ${{ matrix.config.cxx }})
          execute_process(COMMAND cmake --version)
          execute_process(COMMAND mkdir build)
          execute_process(COMMAND mkdir instdir)
          execute_process(COMMAND cmake
            -S .
            -B .
            -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }}
            -G "${{ matrix.config.generators }}"
            -DCMAKE_INSTALL_PREFIX:PATH=instdir
            RESULT_VARIABLE result
          )
          if (NOT result EQUAL 0)
            message(FATAL_ERROR "Bad exit status")
          endif()

      - name: Build
        shell: cmake -P {0}
        run: |
          execute_process(COMMAND cmake 
            --build . --config ${{ matrix.config.build_type }}
            RESULT_VARIABLE result
          )
          if (NOT result EQUAL 0)
            message(FATAL_ERROR "Bad exit status")
          endif()

      - name: Install Strip
        run: cmake --install . --strip

      - name: Pack
        working-directory: instdir
        run: ${{ matrix.config.archiver }} ../${{ matrix.config.artifact }} .

      - name: Upload
        uses: actions/upload-artifact@v1
        with:
          path: ./${{ matrix.config.artifact }}
          name: ${{ matrix.config.artifact }}

      - name: Upload release asset
        if: github.event.action == 'published'
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ matrix.config.artifact }}
          asset_name: ${{ matrix.config.artifact }}.zip
          asset_content_type: application/zip
