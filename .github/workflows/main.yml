# This is a basic workflow to help you get started with Actions
# workflow - цепочка действий
# Имя процесса Билдится на всех типах
name: CMake Build Matrix

# Controls when the action will run. Triggers the workflow on push
on: [push]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }} # будет запускаться по очереди на всех типах машин
    strategy:
      fail-fast: false
      matrix:
        config: 
        - {
            name: "Windows Latest MSVC",
            os: windows-latest,
            artifact: "windows_msvc.7z",
            build_type: "Release",
            cc: "cl",
            cxx: "cl",
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
            generators: "Visual Studio 16 2019"
          }
        - {
            name: "Windows Latest MinGW",
            os: windows-latest,
            artifact: "windows_mingw.7z",
            build_type: "Release",
            cc: "gcc",
            cxx: "g++",
            generators: "MSYS Makefiles"
          }
        - {
            name: "Ubuntu Latest GCC",
            os: ubuntu-latest,
            artifact: "ubuntu_gcc.7z",
            build_type: "Release",
            cc: "gcc",
            cxx: "g++",
            generators: "Unix Makefiles"
          }
        - {
            name: "macOS Latest Clang",
            os: macos-latest,
            artifact: "macos_clang.7z",
            build_type: "Release",
            cc: "clang",
            cxx: "clang++",
            generators: "Unix Makefiles"
          }

    steps:
      - uses: actions/checkout@v1

      - name: Configure
        shell: cmake -P {0}
        run: |
          set(ENV{CC} ${{ matrix.config.cc }})
          set(ENV{CXX} ${{ matrix.config.cxx }})
          execute_process(COMMAND cmake --version)
          execute_process(COMMAND mkdir build)
          execute_process(COMMAND mkdir instdir)
          execute_process(COMMAND cmake
            -S .
            -B .
            -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }}
            -G "${{ matrix.config.generators }}"
            -DCMAKE_INSTALL_PREFIX:PATH=instdir
            RESULT_VARIABLE result
          )
          if (NOT result EQUAL 0)
            message(FATAL_ERROR "Bad exit status")
          endif()

      - name: Build
        shell: cmake -P {0}
        run: |
          execute_process(COMMAND cmake 
            --build .
            RESULT_VARIABLE result
          )
          if (NOT result EQUAL 0)
            message(FATAL_ERROR "Bad exit status")
          endif()

      - name: Install Strip
        run: cmake --install . --strip

      - name: Pack
        working-directory: instdir
        run: |
          cmake -E tar --create f --auto-compress --verbose ../${{ matrix.config.artifact }} .
          7z --help

      - name: Upload
        uses: actions/upload-artifact@v1
        with:
          path: ./${{ matrix.config.artifact }}
          name: ${{ matrix.config.artifact }}

      # - name: Run a one-line script
      #   shell: cmake -P {0}
      #   run: |
      #     if ("${{ runner.os }}" STREQUAL "Windows")
      #       execute_process(COMMAND dir /S)
      #     elseif ("${{ runner.os }}" STREQUAL "Linux")
      #       execute_process(COMMAND ls -laR)
      #     elseif ("${{ runner.os }}" STREQUAL "macOS")
      #       execute_process(COMMAND ls -laR)
      #     endif()

#       - name: Configure
#         shell: cmake -P {0}
#         run: |
#           execute_process(
#               COMMAND cmake
#                 -S .
#                 -B build
#                 -D CMAKE_BUILD_TYPE=$ENV{BUILD_TYPE}
#               RESULT_VARIABLE result
#             )

    # Steps represent a sequence of tasks that will be executed as part of the job
    #steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    #- uses: actions/checkout@v2

    # Runs a single command using the runners shell
    #- name: Run a one-line script
    #  run: echo Hello, world!

    # Runs a set of commands using the runners shell
    #- name: Run a multi-line script
    #  run: |
    #    echo Add other actions to build,
    #    echo test, and deploy your project.
